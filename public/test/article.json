{
    "title": "less——可编程的css语言",
    "author": "chao",
    "bg": "/public/upload/less-logo.png",
    "titleBg": "/public/upload/KingPengiunsSeal_ZH-CN10941640086_1366x768.jpg",
    "description": "LESSCSS是一种动态样式语言，属于CSS预处理语言的一种，它使用类似CSS的语法，为CSS的赋予了动态语言的特性，如变量、继承、运算、函数等，更方便CSS的编写和维护。",
    "date": "2013-07-16",
    "tags": [
        {
            "zhCn": "脚",
            "name": "javascript",
            "id": 123
        },
        {
            "zhCn": "图",
            "name": "canvas",
            "id": 124
        }],
    "content": "<div id=\"a_jsspec_write\" class=\"section\"> <h2>Javascript 规范 / 书写规范</h2> <p>在我们的代码中充斥着各种不规范的写法：</p> <ul> <li>句尾没有分号<pre><code class=\"cs\"><span class=\"keyword\">var</span> isHotel = json.type == <span class=\"string\">\"hotel\"</span> ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span></code></pre> </li> <li>变量命名各种各样<pre><code class=\"cs\"><span class=\"keyword\">var</span> is_hotel; <span class=\"keyword\">var</span> isHotel; <span class=\"keyword\">var</span> ishotel;</code></pre> </li> <li>if 缩写<pre><code class=\"bash\"><span class=\"keyword\">if</span> isHotel console.log(<span class=\"literal\">true</span>) <span class=\"keyword\">else</span> console.log(<span class=\"literal\">false</span>)</code></pre> </li> <li>使用 eval<pre><code class=\"php\"><span class=\"keyword\">var</span> json = <span class=\"keyword\">eval</span>(jsonText);</code></pre> </li> <li><p>变量未定义到处都是</p> <pre><code class=\"xml\">function() {var isHotel = 'true'; ....... var html = isHotel ? '<span class=\"tag\">&lt;<span class=\"title\">p</span>&gt;</span>hotel<span class=\"tag\">&lt;/<span class=\"title\">p</span>&gt;</span>' : \"\"; }</code></pre> </li> <li>超长函数<pre><code class=\"javascript\"><span class=\"keyword\">function</span>() {<span class=\"keyword\">var</span> isHotel = <span class=\"string\">'true'</span>; ....... 此处省略<span class=\"number\">300</span>行 <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; }</code></pre> </li> <li>..........</li> </ul> <p>没有书写的规范让我们的代码难以维护，大家在以后的编码时<code>必须</code>严格执行以下规范：</p> <ol> <li><h4><code>tab</code>键<code>必须</code>用<code>四个空格</code>代替</h4> </li> <li><h4>每句代码后<code>必须</code>加<code>;</code></h4> </li> <li><h4>变量、常量、类的命名：以下规则<code>必须</code>执行：</h4> <ul> <li><p>变量：<code>必须</code>采用<code>骆驼峰</code>的命名且首字母小写</p> <pre><code class=\"cs\">  <span class=\"comment\">// 正确的命名</span> <span class=\"keyword\">var</span> isHotel, isHotelBeijing, isHotelBeijingHandian; <span class=\"comment\">// 错误的命名</span> <span class=\"keyword\">var</span> is_Hotel, ishotelbeijing, IsHotelBeiJing;</code></pre> </li> <li><p>常量：<code>必须</code>采用全大写的命名，且单词以<code>_</code>分割</p> <p>  <em>常量通常用于ajax请求url，和一些不会改变的数据</em></p> <pre><code class=\"cs\">  <span class=\"comment\">// 正确的命名</span> <span class=\"keyword\">var</span> HOTEL_GET_URL = <span class=\"string\">'http://map.baidu.com/detail'</span>, PLACE_TYPE = <span class=\"string\">'hotel'</span>;</code></pre> </li> <li><p>类：<code>必须</code>采用<code>骆驼峰</code>的命名且首字母大写，如：</p> <pre><code class=\"javascript\">  <span class=\"comment\">// 正确的写法</span> <span class=\"keyword\">var</span> FooAndToo = <span class=\"keyword\">function</span>(name) {<span class=\"keyword\">this</span>.name = name; }</code></pre> </li> </ul> </li> <li><h4>空格的使用：以下规则<code>必须</code>执行：</h4> <ul> <li><p><code>if</code>中的空格，先上例子</p> <pre><code class=\"cs\">  <span class=\"comment\">//正确的写法</span> <span class=\"keyword\">if</span> (isOk) {console.log(<span class=\"string\">\"ok\"</span>); } <span class=\"comment\">//不正确的写法</span> <span class=\"keyword\">if</span>(isOk){console.log(<span class=\"string\">\"ok\"</span>); }</code></pre> <blockquote> <ul> <li><code>()</code>中的判断条件前后都<code>必须</code>加空格</li> <li><code>()</code>里的判断前后<code>禁止</code>加空格，如：正确的写法: <code>if (isOk)</code>；错误的写法: <code>if ( isOk )</code></li> </ul> </blockquote> </li> <li><p><code>switch</code>中的空格, 先上例子</p> <pre><code class=\"cs\">  <span class=\"comment\">//正确的写法</span> <span class=\"keyword\">switch</span>(name) {<span class=\"keyword\">case</span> <span class=\"string\">\"hotel\"</span>: console.log(name); <span class=\"keyword\">break</span>; <span class=\"keyword\">case</span> <span class=\"string\">\"moive\"</span>: console.log(name); <span class=\"keyword\">break</span>; <span class=\"keyword\">default</span>: <span class=\"comment\">// code</span> } <span class=\"comment\">//不正确的写法</span> <span class=\"keyword\">switch</span> (name) {                     <span class=\"comment\">// switch 后不应该有空格, 正确的写法: switch(name) { // code</span> <span class=\"keyword\">case</span> <span class=\"string\">\"hotel\"</span>: console.log(name); <span class=\"keyword\">break</span>;                          <span class=\"comment\">// break; 应该和console.log对齐</span> <span class=\"keyword\">case</span> <span class=\"string\">\"movie\"</span>:                   <span class=\"comment\">// 每个case之前需要有换行</span> console.log(name); <span class=\"keyword\">break</span>;                          <span class=\"comment\">// break; 应该和console.log对齐</span> <span class=\"keyword\">default</span>: <span class=\"comment\">// code</span> }</code></pre> <blockquote> <ul> <li><code>switch</code>后<code>禁止</code>加空格</li> <li><code>break</code>相对于<code>case</code> <code>必须</code>加四个空格的缩进</li> <li>每个<code>case</code>语句之间<code>必须</code>有换行</li> </ul> </blockquote> </li> <li><p><code>for</code>中的空格，先上例子</p> <pre><code class=\"cs\">  <span class=\"comment\">// 正确的写法</span> <span class=\"keyword\">var</span> names = [<span class=\"string\">\"hotel\"</span>, <span class=\"string\">\"movie\"</span>], i, len; <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>, len=names.length; i &lt; len; i++) {<span class=\"comment\">// code</span> } <span class=\"comment\">// 不正确的写法</span> <span class=\"keyword\">var</span> names = [<span class=\"string\">\"hotel\"</span>, <span class=\"string\">\"movie\"</span>], i, len; <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>, len = names.length;i &lt; len;i++) {          <span class=\"comment\">// for后应该有空格，每个`;`号后需要有空格，变量的赋值不应该有空格</span> <span class=\"comment\">// code</span> }</code></pre> <blockquote> <ul> <li><code>for</code>后<code>必须</code>加空格</li> <li>每个<code>;</code>后<code>必须</code>加空格</li> <li><code>()</code>中<code>禁止</code>用<code>var</code>声明变量; 且变量的赋值<code>=</code>前后<code>禁止</code>加空格</li> </ul> </blockquote> </li> <li><p><code>function</code> 中的空格, 先上例子</p> <pre><code class=\"javascript\">  <span class=\"comment\">// 正确的写法</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">call</span><span class=\"params\">(name)</span> {</span> } <span class=\"keyword\">var</span> cell = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">()</span> {</span> }; <span class=\"comment\">// 不正确的写法</span> <span class=\"keyword\">var</span> call = <span class=\"keyword\">function</span>(name){<span class=\"comment\">// code</span> }</code></pre> <blockquote> <ul> <li>参数的反括号后<code>必须</code>加空格</li> <li><code>function</code> 后<code>必须</code>加空格</li> </ul> </blockquote> </li> <li><p><code>var</code> 中空格及定义，先上例子</p> <pre><code class=\"javascript\">  <span class=\"comment\">// 一个推荐的var写法组</span> <span class=\"keyword\">function</span>(res) {<span class=\"keyword\">var</span> code = <span class=\"number\">1</span> + <span class=\"number\">1</span>, json = JSON.parse(res), type, html; <span class=\"comment\">// code</span> }</code></pre> <blockquote> <ul> <li>声明变量<code>=</code>前后<code>必须</code>添加空格</li> <li>每个变量的赋值声明以<code>,</code>结束后<code>必须</code>换行进行下一个变量赋值声明</li> <li><code>推荐</code>将所有不需要进行赋值的变量声明放置最后一行，且变量之间不需要换行</li> <li><code>推荐</code>当一组变量声明完成后，空一行后编写其余代码</li> </ul> </blockquote> </li> </ul> </li> <li><h4>在同一个函数内部，局部变量的声明<code>必须</code>置于顶端</h4> <p> <em>因为即使放到中间，js解析器也会提升至顶部</em></p> <pre><code class=\"javascript\"> <span class=\"comment\">// 正确的书写</span> <span class=\"keyword\">var</span> clear = <span class=\"keyword\">function</span>(el) {<span class=\"keyword\">var</span> id = el.id, name = el.getAttribute(<span class=\"string\">\"data-name\"</span>); ......... <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; } <span class=\"comment\">// 错误的书写</span> <span class=\"keyword\">var</span> clear = <span class=\"keyword\">function</span>(el) {<span class=\"keyword\">var</span> id = el.id; ...... <span class=\"keyword\">var</span> name = el.getAttribute(<span class=\"string\">\"data-name\"</span>); ......... <span class=\"keyword\">return</span> <span class=\"literal\">true</span>; }</code></pre> </li> <li><h4>块内函数<code>必须</code>用局部变量声明</h4> <pre><code class=\"javascript\"> <span class=\"comment\">// 错误的写法</span> <span class=\"keyword\">var</span> call = <span class=\"keyword\">function</span>(name) {<span class=\"keyword\">if</span> (name == <span class=\"string\">\"hotel\"</span>) {<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span><span class=\"params\">()</span> {</span> console.log(<span class=\"string\">\"hotel foo\"</span>); } } foo &amp;&amp; foo(); } <span class=\"comment\">// 正确的写法</span> <span class=\"keyword\">var</span> call = <span class=\"keyword\">function</span>(name) {<span class=\"keyword\">var</span> foo; <span class=\"keyword\">if</span> (name == <span class=\"string\">\"hotel\"</span>) {foo = <span class=\"keyword\">function</span>() {console.log(<span class=\"string\">\"hotel foo\"</span>); } } foo &amp;&amp; foo(); }</code></pre> <p> <em>引起的bug：第一种写法<code>foo</code>的声明被提前了; 调用<code>call</code>时：第一种写法会调用<code>foo</code>函数，第二种写法不会调用<code>foo</code>函数</em></p> </li> <li><h4><code>禁止</code>使用eval，采取<code>$.parseJSON</code></h4> </li> <li><h4>除了三目预算，<code>if</code>,<code>else</code>等<code>禁止</code>简写</h4> <pre><code class=\"cs\"> <span class=\"comment\">// 正确的书写</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">true</span>) {alert(name); } console.log(name); <span class=\"comment\">// 错误的书写</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">true</span>) alert(name); console.log(name); <span class=\"comment\">// 错误的书写</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">true</span>) alert(name); console.log(name);</code></pre> </li> <li><h4><code>推荐</code>在需要以<code>{}</code>闭合的代码段前增加换行，如：<code>for</code> <code>if</code></h4> <pre><code class=\"cs\"> <span class=\"comment\">// 没有换行，小的代码段无法区分</span> <span class=\"keyword\">if</span> (wl &amp;&amp; wl.length) {<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, l = wl.length; i &lt; l; ++i) {p = wl[i]; type = Y.Lang.type(r[p]); <span class=\"keyword\">if</span> (s.hasOwnProperty(p)) {<span class=\"keyword\">if</span> (merge &amp;&amp; type == <span class=\"string\">'object'</span>) {Y.mix(r[p], s[p]); } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ov || !(p <span class=\"keyword\">in</span> r)) {r[p] = s[p]; } } } } <span class=\"comment\">// 有了换行，逻辑清楚多了</span> <span class=\"keyword\">if</span> (wl &amp;&amp; wl.length) {<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, l = wl.length; i &lt; l; ++i) {p = wl[i]; type = Y.Lang.type(r[p]); <span class=\"keyword\">if</span> (s.hasOwnProperty(p)) {<span class=\"comment\">// 处理merge逻辑</span> <span class=\"keyword\">if</span> (merge &amp;&amp; type == <span class=\"string\">'object'</span>) {Y.mix(r[p], s[p]); } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ov || !(p <span class=\"keyword\">in</span> r)) {r[p] = s[p]; } } } }</code></pre> <p> <em>换行可以是空行，也可以是注释</em></p> </li> <li><h4><code>推荐</code>使用<code>Function</code>进行类的定义，<code>不推荐</code>继承，如需继承采用成熟的类库实现继承</h4> <pre><code class=\"php\"> <span class=\"comment\">// 类的实现</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span><span class=\"params\">(name)</span> {</span> <span class=\"keyword\">this</span>.name = name; } Person.prototype.sayName = function() {alert(<span class=\"keyword\">this</span>.name); }; <span class=\"keyword\">var</span> me = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Nicholas\"</span>); <span class=\"comment\">// 将this放到局部变量self</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Persion</span><span class=\"params\">(name, sex)</span> {</span> <span class=\"keyword\">var</span> <span class=\"keyword\">self</span> = <span class=\"keyword\">this</span>; <span class=\"keyword\">self</span>.name = name; <span class=\"keyword\">self</span>.sex = sex; }</code></pre> </li> <li><h4><code>推荐</code>使用局部变量缓存反复查找的对象(包括但不限于全局变量、dom查询结果、作用域链较深的对象)</h4> <pre><code class=\"javascript\"> <span class=\"comment\">// 缓存对象</span> <span class=\"keyword\">var</span> getComment = <span class=\"keyword\">function</span>() {<span class=\"keyword\">var</span> dom = $(<span class=\"string\">\"#common-container\"</span>),               <span class=\"comment\">// 缓存dom</span> appendTo = $.appendTo,                      <span class=\"comment\">// 缓存全局变量</span> data = <span class=\"keyword\">this</span>.json.data;                      <span class=\"comment\">// 缓存作用域链较深的对象</span> }</code></pre> <p> <em>本规则由<code>帅帅</code>同学提出</em></p> </li> <li><h4>当需要缓存<code>this</code>时必须使用<code>self</code>变量进行缓存</h4> <pre><code class=\"php\"> <span class=\"comment\">// 缓存this</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Row</span><span class=\"params\">(name)</span> {</span> <span class=\"keyword\">var</span> <span class=\"keyword\">self</span> = <span class=\"keyword\">this</span>; <span class=\"keyword\">self</span>.name = name; $(<span class=\"string\">\".row\"</span>).click(function() {<span class=\"keyword\">self</span>.getName(); }); }</code></pre> </li> <li><h4><code>不推荐</code>超长函数, 当函数超过100行，就要想想是否能将函数拆为两个或多个函数</h4> </li> </ol> <p><em>历史代码我们可能会处于各种原因无法修改，但是希望大家在以后写新代码的时候<code>遵守我们的书写规范</code></em></p> </div>"
  }